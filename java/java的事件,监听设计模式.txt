事件，监听设计模式：作用----当模块的一部分A在完成后需要通知其他的软件模块B，而等待通知的模块B在事先不需要采用轮询的方式来查看另一个模块A是否通知自己。
	举个列子：比如说，esight的服务器模块在添加完成服务器后，希望框架模块去完成这台服务器的链路绘制，等一些事情。正常来说，框架提供一个方法给我，然后添加完成服务器
后，调用这个方法就可以了。但是假如说，我还希望框架帮我去干其他的事情呢？是不是一个一个去调用框架提供的方法？假如说存储模块在添加完存储后，也希望框架干和服务器类似
的一些事情，那存储是不也需要挨个调用这些方法呢？
	但假如说，我框架利用一种机制（就是时间监听机制），你们各个模块在添加完设备后，只需要发个事件告诉我，你们添加完成设备了，同时在把我想要的mac地址给我就行了，剩下
的你就不用管了，框架就替你完成了。这样是不就方便了各个模块的开发呢？
	
	  从以上可以看出，事件监听的设计模式，优势在于：1利于后续开发（框架实现这种模式的时候比较麻烦，但是利于后续模块的开发）；2一对多，我发一个事件就行了，后续的我再想利用该事件干其他事情，只需要在写个监听器就行了。之前的代码可以完全不用动
	  
	  
	  
	  
那么到底如何实现这种机制呢？在干完某件事后，主动发布事件。所有的监听器就会接收到该事件。