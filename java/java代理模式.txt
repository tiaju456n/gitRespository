java代理模式


一.什么时候需要代理模式？
	1、一个对象不能或者不想直接访问另一个对象，但是又要用到那个对象。
	2、对于一个对象的某个方法，希望在这个方法前后做一些其他的事情。
	
二.静态代理
	静态代理要实现上面的功能其实很简单，只需要设置一个代理对象a，让他和被代理对象b都实现同一个接口I.这样a，b会有共同的方法。在代理对象a中要实现的接口方法采用调用b的方法去实现。然后此时就可以在b中写其他的方法去调用实现的接口方法。这样就做到了使用b的方法，且可以在这个方法前后执行其他想调用的代码了。具体的代码可看http://www.360doc.com/content/14/0801/14/1073512_398598312.shtml
	
三.动态代理
	静态代理的缺点是明显的。会多于去书写一个代理类，最终希望需要代理的时候才产生代理，不需要的时候就不要了。
	当在代码阶段规定这种代理关系，Proxy类通过编译器编译成class文件，当系统运行时，此class已经存在了。这种静态的代理模式固然在访问无法访问的资源，增强现有的接口业务功能方面有很大的优点，但是大量使用这种静态代理，会使我们系统内的类的规模增大，并且不易维护；并且由于Proxy和RealSubject的功能 本质上是相同的，Proxy只是起到了中介的作用，这种代理在系统中的存在，导致系统结构比较臃肿和松散
	
	动态代理应运而生，他的思想是：在java代码里将一段代码编译成class文件，然后再加载进虚拟机。这样就可以动态的生成代理对象了。然后就可以在被代理对象的方法前后执行我们希望执行的方法。（这就是拦截器的简单实现）
	为了解决这个问题，就有了动态地创建Proxy的想法：在运行状态中，需要代理的地方，根据Subject 和RealSubject，动态地创建一个Proxy，用完之后，就会销毁，这样就可以避免了Proxy 角色的class在系统中冗杂的问题了。
	
	
	简单的来说：
	静态代理其实就是利用接口等实现这样子:
	
	前置处理器（可以加任意东西）
	原来的方法
	后置处理器（可以加任意东西）
	
	
	而动态代理是在静态代理的基础上，实现的。就是说静态代理是需要提前将代理的这台代码写完整，然后编译成class，放在虚拟机里运行。而动态代理是，在需要使用代理的时候，写出一套代理的2进制代码，并把其汇总成clas文件，然后加载进jvm虚拟机运行。运行完后，可以选择性的把这些class再从内存删掉。
	动态代理比静态代理的优势就在于更加灵活，减少内存使用。
	
	
	
代理模式就是spring的oop面向切面的一种简单实现。原理都是一样的。这样做的优势很明显，就是使原代码更加灵活，想要往原代码里加啥东西都是可以的，而且还不用去修改原来的代码，更不用管原来的代码到底是咋实现的。
	